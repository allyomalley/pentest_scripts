import json
import sys
import os
import string
import subprocess

def parseMassDNS(filepath):
	domain_map = {}
	seenDomains = []
	with open(filepath) as f:
		for line in f:
			response = json.loads(line)
			if (response['resp_type'] == 'A'):
				domain = response['query_name']
				ip  = response['data']
				if (ip not in domain_map.keys()):
					if domain.endswith('.'):
						domain = domain[:-1]
					if (domain not in seenDomains):
						domain_map[ip] = domain
						seenDomains.append(domain)
	return domain_map

def parseMasscan(masscan, domain_map):
	targetUrls = []
	with open(masscan) as f:
		for line in f:
			response = json.loads(line)
			if (response['data']['status'] == 'open'):
				ip  = response['ip']
				port = response['port']
				if (ip in domain_map.keys()):
					domain = domain_map[ip]
					url = ""
					if (port == 443):
						url = 'https://' + domain
					elif (port == 80):
						url = 'http://' + domain
					else:
						url = 'http://' + domain + ":" + str(port)
					
					if (url not in targetUrls):
						targetUrls.append(url)
	return targetUrls

def writeMassDNSOutput(domain_map, domainOutput, ipOutput):
	foundCount = 0
	domainFile = open(domainOutput, 'w')
	ipFile = open(ipOutput, 'w')

	for ip, domain in domain_map.items():
		foundCount += 1
		domainFile.write(domain)
		domainFile.write('\n')
		ipFile.write(ip)
		ipFile.write('\n')
	
	domainFile.close()
	ipFile.close()
	print("Found " + str(foundCount) + " resolvable domain/IP pairs")

def writeMasscanOutput(urls, outputFile):
	foundCount = 0
	urlFile = open(outputFile, 'w')

	for targetUrl in urls:
		foundCount += 1
		urlFile.write(targetUrl)
		urlFile.write('\n')
	
	urlFile.close()
	return foundCount

def generateUrls(masscan, domain_map, outputPrefix):
	urlOutput = outputPrefix + "_targetUrls.txt"
	try:
		targetUrls = parseMasscan(masscan, domain_map)
		writeMasscanOutput(targetUrls, urlOutput)
		return len(targetUrls)
	except Exception as e:
		print(e)
		return -1

def processMasscan(ipFile, domain_map, masscanOutput):
	print("Starting massscan...")
	subprocess.run(['../masscan/bin/masscan', '-iL', ipFile, '-oD', masscanOutput, '--open-only', '--max-rate', '10000', '-p80,443,8080', '--max-retries', '5'])
	numGenerated = generateUrls(masscanOutput, domain_map, outputPrefix)
	if (numGenerated >= 0):
		print("Wrote " + str(numGenerated) + " live URLs for targeting")
	else:
		print("Error - Unable to generate URL list")

def processMassDNS(targetHosts, outputPrefix):
	print("Starting massdns...")
	massdnsOutput = outputPrefix + '_massdns.txt'
	subprocess.run(['../massdns/bin/massdns', '-c', '25', '-o', 'J', '-r', '../massdns/lists/resolvers.txt', '-s', '100', '-w', massdnsOutput, '-t', 'A', targetHosts])
	print("Massdns complete, parsing results...")
	domain_map = parseMassDNS(massdnsOutput)
	writeMassDNSOutput(domain_map, domainOutput, ipOutput)
	return domain_map

if __name__ == "__main__":
	if (len(sys.argv) > 1 and sys.argv[1] == "--target-list"):
		targetHosts = sys.argv[2]
		outputPrefix = targetHosts.rsplit('/',1)[-1]
		outputPrefix = outputPrefix.replace(".txt", "")

		# MassDNS Parsed output files
		domainOutput = outputPrefix + "_domains_alive.txt"
		ipOutput = outputPrefix + "_ips_alive.txt"

		# Run massDNS on the supplied host list
		domain_map = processMassDNS(targetHosts, outputPrefix)

		# Run masscan on the live addresses collected from massdns
		masscanOutput = outputPrefix + '_masscan.txt'
		processMasscan(ipOutput, domain_map, masscanOutput)
		
		print("Done!")
		print("Output Files:")
		print(domainOutput)
		print(ipOutput)
		print(outputPrefix + "_targetUrls.txt")
		exit(0)
	else:
		print("Error: Supply the domain list with the --target-list flag")
		exit(0)